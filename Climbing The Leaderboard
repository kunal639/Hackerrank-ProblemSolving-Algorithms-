/*
 * Complete the 'climbingLeaderboard' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY ranked
 *  2. INTEGER_ARRAY player
 */
int binarySearch(vector<int>&a,int key)
{
    int low = 0; int high = a.size()-1;
    while(low<=high)
    {
        int mid = (low + high)/2;
        if(a[mid]==key)
        {
            return mid;
        }
        else if(a[mid]<key && key<a[mid-1])
        {
            return mid;
        }
        else if(a[mid]>key && key>=a[mid+1])
        {
            return mid+1;
        }
        else if(a[mid]>key)
        {
            low = mid+1;
        }
        else if(a[mid]<key){
            high = mid-1;
        }
    }
    return -1;
}

vector<int> climbingLeaderboard(vector<int> ranked, vector<int> player)
{
        vector<int> pos(ranked.size()); vector<int> plrrank(player.size());
        pos[0]=1;
        for (int i=1; i<ranked.size(); i++) {
            if(ranked[i]==ranked[i-1])
            {
                pos[i] = pos[i-1];
            }
            else
            {
                pos[i] = pos[i-1]+1;
            }
        }

        for (int i=0; i<player.size(); i++) {
            int score = player[i];
            if(score>ranked[0])
            {
                plrrank[i] = 1;
            }
            else if(score<ranked[ranked.size()-1])
            {
                plrrank[i] = pos[ranked.size()-1]+1;
            }
            else {
                int idx = binarySearch(ranked,score);
                plrrank[i] = pos[idx];
            }
        }
        return plrrank;
}
